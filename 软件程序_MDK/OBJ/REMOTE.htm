<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\REMOTE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\REMOTE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jun 01 00:50:47 2022
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
game1_draw &rArr; MPU_Roll_Detect &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[be]">console_log</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">console_log</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">Change_State</a> from diag.o(.text) referenced from diag.o(.text)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from nvic.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a0]">LogTimeUpdate</a> from my_menu.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[49]">MeasureTimeUpdate</a> from diag.o(.text) referenced from diag.o(.text)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23f]">ShutDown</a> from my_menu.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from millis.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[ab]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[ab]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[43]">alarmsDown</a> from alarms.o(.text) referenced from alarms.o(.text)
 <LI><a href="#[44]">alarmsDraw</a> from alarms.o(.text) referenced from alarms.o(.text)
 <LI><a href="#[41]">alarmsUp</a> from alarms.o(.text) referenced from alarms.o(.text)
 <LI><a href="#[74]">altitude_open</a> from altitude_display.o(.text) referenced from normal.o(.text)
 <LI><a href="#[87]">back</a> from menu.o(.text) referenced 4 times from stopwatch.o(.text)
 <LI><a href="#[54]">btnBounce</a> from game3.o(.text) referenced from game3.o(.text)
 <LI><a href="#[50]">btnDown</a> from game2.o(.text) referenced from game2.o(.text)
 <LI><a href="#[3a]">btnExit</a> from mpu_task.o(.text) referenced 7 times from mpu_task.o(.text)
 <LI><a href="#[98]">btnFlashRate</a> from torch.o(.text) referenced from torch.o(.text)
 <LI><a href="#[4c]">btnLeft</a> from game1.o(.text) referenced from game1.o(.text)
 <LI><a href="#[56]">btnPause</a> from game3.o(.text) referenced from game3.o(.text)
 <LI><a href="#[8b]">btnReset</a> from stopwatch.o(.text) referenced from stopwatch.o(.text)
 <LI><a href="#[4e]">btnRight</a> from game1.o(.text) referenced from game1.o(.text)
 <LI><a href="#[8a]">btnStartStop</a> from stopwatch.o(.text) referenced from stopwatch.o(.text)
 <LI><a href="#[52]">btnUp</a> from game2.o(.text) referenced from game2.o(.text)
 <LI><a href="#[39]">btndown</a> from mpu_task.o(.text) referenced 2 times from mpu_task.o(.text)
 <LI><a href="#[a9]">btndown1</a> from altitude_display.o(.text) referenced from altitude_display.o(.text)
 <LI><a href="#[3b]">btnup</a> from mpu_task.o(.text) referenced 2 times from mpu_task.o(.text)
 <LI><a href="#[a8]">btnup1</a> from altitude_display.o(.text) referenced from altitude_display.o(.text)
 <LI><a href="#[240]">cmd2</a> from my_menu.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[242]">cmd3</a> from my_menu.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[37]">display_load</a> from display.o(.text) referenced 7 times from mpu_task.o(.text)
 <LI><a href="#[9d]">down</a> from tunemaker.o(.text) referenced from tunemaker.o(.text)
 <LI><a href="#[38]">draw</a> from mpu_task.o(.text) referenced 9 times from mpu_task.o(.text)
 <LI><a href="#[aa]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1df]">game1_draw</a> from game1.o(.text) referenced from game1.o(.text)
 <LI><a href="#[57]">game1_start</a> from game1.o(.text) referenced from games.o(.text)
 <LI><a href="#[58]">game2_start</a> from game2.o(.text) referenced from games.o(.text)
 <LI><a href="#[59]">game3_start</a> from game3.o(.text) referenced from games.o(.text)
 <LI><a href="#[9f]">history_display</a> from altitude_display.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[a7]">history_draw</a> from altitude_display.o(.text) referenced from altitude_display.o(.text)
 <LI><a href="#[40]">itemLoader</a> from alarms.o(.text) referenced 10 times from alarms.o(.text)
 <LI><a href="#[64]">mAlarmsOpen</a> from alarms.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[79]">mDiagOpen</a> from diag.o(.text) referenced 2 times from settings.o(.text)
 <LI><a href="#[78]">mDisplayOpen</a> from m_display.o(.text) referenced 2 times from settings.o(.text)
 <LI><a href="#[92]">mDown</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[80]">mDraw</a> from sleep.o(.text) referenced from sleep.o(.text)
 <LI><a href="#[68]">mGamesOpen</a> from games.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[71]">mOpen</a> from m_main.o(.text) referenced from m_main.o(.text)
 <LI><a href="#[42]">mSelect</a> from alarms.o(.text) referenced 10 times from alarms.o(.text)
 <LI><a href="#[69]">mSettingsOpen</a> from settings.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[76]">mSleepOpen</a> from sleep.o(.text) referenced 2 times from settings.o(.text)
 <LI><a href="#[77]">mSoundOpen</a> from sound.o(.text) referenced 2 times from settings.o(.text)
 <LI><a href="#[75]">mTimeDateOpen</a> from timedate.o(.text) referenced 2 times from settings.o(.text)
 <LI><a href="#[90]">mUp</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6a]">menu_close</a> from menu.o(.text) referenced from m_main.o(.text)
 <LI><a href="#[6c]">menu_down</a> from menu.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[6b]">menu_draw</a> from menu.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[6d]">menu_select</a> from menu.o(.text) referenced 3 times from m_main.o(.text)
 <LI><a href="#[6e]">menu_up</a> from menu.o(.text) referenced 2 times from m_main.o(.text)
 <LI><a href="#[9e]">mpu_open</a> from mpu_task.o(.text) referenced from my_menu.o(.text)
 <LI><a href="#[73]">my_menu_open</a> from my_menu.o(.text) referenced from normal.o(.text)
 <LI><a href="#[99]">next</a> from tune.o(.text) referenced from tune.o(.text)
 <LI><a href="#[46]">nextOption</a> from menu.o(.text) referenced 9 times from alarms.o(.text)
 <LI><a href="#[45]">prevOption</a> from menu.o(.text) referenced 9 times from alarms.o(.text)
 <LI><a href="#[8e]">saveTimeDate</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[9c]">select</a> from tunemaker.o(.text) referenced from tunemaker.o(.text)
 <LI><a href="#[47]">selectAlarm</a> from alarms.o(.text) referenced from alarms.o(.text)
 <LI><a href="#[8c]">selectDate</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[8d]">selectTime</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[62]">setAnimations</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[5f]">setBrightness</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[63]">setFPS</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[60]">setInvert</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[7d]">setMoveCheck</a> from sleep.o(.text) referenced from sleep.o(.text)
 <LI><a href="#[61]">setRotate</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[7c]">setTimeout</a> from sleep.o(.text) referenced from sleep.o(.text)
 <LI><a href="#[85]">setVolumeAlarm</a> from sound.o(.text) referenced from sound.o(.text)
 <LI><a href="#[86]">setVolumeHour</a> from sound.o(.text) referenced from sound.o(.text)
 <LI><a href="#[84]">setVolumeUI</a> from sound.o(.text) referenced from sound.o(.text)
 <LI><a href="#[3f]">stopAlarm</a> from alarm.o(.text) referenced from alarm.o(.text)
 <LI><a href="#[66]">stopwatch_open</a> from stopwatch.o(.text) referenced from m_main.o(.text)
 <LI><a href="#[5e]">thisDraw</a> from m_display.o(.text) referenced from m_display.o(.text)
 <LI><a href="#[83]">thisdraw</a> from sound.o(.text) referenced from sound.o(.text)
 <LI><a href="#[94]">timeDataDown</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[93]">timeDataUp</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[95]">timeDateDraw</a> from timedate.o(.text) referenced from timedate.o(.text)
 <LI><a href="#[65]">torch_open</a> from torch.o(.text) referenced from m_main.o(.text)
 <LI><a href="#[67]">tunemakerOpen</a> from tunemaker.o(.text) referenced from m_main.o(.text)
 <LI><a href="#[9b]">up</a> from tunemaker.o(.text) referenced from tunemaker.o(.text)
 <LI><a href="#[36]">watchface_normal</a> from normal.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[264]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ac]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[265]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[266]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[267]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[268]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[269]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[26a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[ae]"></a>power_pin_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = power_pin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[b2]"></a>bme_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bme_update &rArr; bme280CompensateP &rArr; presssureFilter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTrim
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[b7]"></a>c_setup</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = c_setup &rArr; mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_date
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INT_INIT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_pin_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>c_loop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = c_loop &rArr; bme_update &rArr; bme280CompensateP &rArr; presssureFilter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_userActive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme_update
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; c_setup &rArr; mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>LCD_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Init &rArr; InitGraph &rArr; DriverInit &rArr; OLED_Init &rArr; OLED_CLS &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[d8]"></a>LCD_Clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[da]"></a>oled_flush</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oled_flush &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
</UL>

<P><STRONG><a name="[dc]"></a>TIM_PWM_Init_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TIM_PWM_Init_Init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>

<P><STRONG><a name="[c6]"></a>buzzer_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = buzzer_init &rArr; TIM_PWM_Init_Init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[e6]"></a>buzzer_buzz</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[26c]"></a>buzzer_buzzing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, beep.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>buzzer_update</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buzzer_update &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[bf]"></a>I2C_GPIO_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[ea]"></a>I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_WriteData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Write
</UL>

<P><STRONG><a name="[ec]"></a>I2C_Stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_WriteData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
</UL>

<P><STRONG><a name="[ed]"></a>I2C_Ack</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[ee]"></a>I2C_NoAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
</UL>

<P><STRONG><a name="[ef]"></a>I2C_WaitAck</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_WriteData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Write
</UL>

<P><STRONG><a name="[f0]"></a>MPU_I2C_WaitAck</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[f1]"></a>I2C_SendByte</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_WriteData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Write
</UL>

<P><STRONG><a name="[f2]"></a>I2C_ReceiveByte</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Read
</UL>

<P><STRONG><a name="[f3]"></a>Single_Write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c_soft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[f4]"></a>Single_Read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c_soft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[bb]"></a>Adc_Init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[fe]"></a>Get_Adc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[102]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>BCD2HEX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ds3231.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
</UL>

<P><STRONG><a name="[106]"></a>B_BCD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds3231.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_Time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_date
</UL>

<P><STRONG><a name="[103]"></a>DS3231_WR_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_Time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_date
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
</UL>

<P><STRONG><a name="[104]"></a>DS3231_RD_Byte</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ds3231.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
</UL>

<P><STRONG><a name="[c4]"></a>DS3231_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS3231_Init &rArr; DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[105]"></a>Set_DS3231_Time</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Set_DS3231_Time &rArr; DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[ca]"></a>Set_DS3231_date</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Set_DS3231_date &rArr; DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_WR_Byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[26d]"></a>Date_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>Get_DS3231_Time</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ds3231.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_RD_Byte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
</UL>

<P><STRONG><a name="[26e]"></a>DS3231Alarm_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ds3231.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>Bme280_ReadData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bme280_ReadData &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTrim
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_Init
</UL>

<P><STRONG><a name="[b3]"></a>readTrim</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = readTrim &rArr; Bme280_ReadData &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme_update
</UL>

<P><STRONG><a name="[10d]"></a>Bme280_WriteData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bme280_WriteData &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_Init
</UL>

<P><STRONG><a name="[c8]"></a>Bme280_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bme280_Init &rArr; readTrim &rArr; Bme280_ReadData &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_WriteData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTrim
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[b6]"></a>bme280CompensateT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bme280CompensateT &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme_update
</UL>

<P><STRONG><a name="[111]"></a>presssureFilter</STRONG> (Thumb, 122 bytes, Stack size 112 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = presssureFilter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
</UL>

<P><STRONG><a name="[b5]"></a>bme280CompensateP</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bme280CompensateP &rArr; presssureFilter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme_update
</UL>

<P><STRONG><a name="[b4]"></a>bme280CompensateH</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bme280CompensateH &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_ReadData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme_update
</UL>

<P><STRONG><a name="[120]"></a>display_altitude</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, bme280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = display_altitude &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[125]"></a>draw_point</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myOLED_DrawLine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dso
</UL>

<P><STRONG><a name="[124]"></a>myOLED_DrawLine</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myOLED_DrawLine &rArr; draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dso
</UL>

<P><STRONG><a name="[126]"></a>mpu_updata</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>

<P><STRONG><a name="[9e]"></a>mpu_open</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_open
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>MPU_Write_Byte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[12d]"></a>MPU_Set_LPF</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[12e]"></a>MPU_Set_Rate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[12f]"></a>MPU_Read_Byte</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Read_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[130]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[131]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[c1]"></a>MPU_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[132]"></a>MPU_Read_Len</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_int_status
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_reg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[133]"></a>MPU_Get_Temperature</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[134]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Pitch_Detect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movecheck
</UL>

<P><STRONG><a name="[135]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[136]"></a>MPU_Write_Len</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>

<P><STRONG><a name="[137]"></a>MPU_Roll_Detect</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MPU_Roll_Detect &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[13a]"></a>MPU_Pitch_Detect</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MPU_Pitch_Detect &rArr; MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[13c]"></a>mpu_reg_dump</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13e]"></a>mpu_read_reg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[13f]"></a>mpu_set_int_latched</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>

<P><STRONG><a name="[140]"></a>mpu_set_sensors</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[141]"></a>mpu_set_bypass</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_bypass &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[142]"></a>mpu_reset_fifo</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[143]"></a>mpu_configure_fifo</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[144]"></a>mpu_set_lpf</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[145]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[146]"></a>mpu_set_sample_rate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[147]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[148]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[149]"></a>mpu_init</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[182]"></a>mget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[14a]"></a>mpu_get_gyro_reg</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[14b]"></a>mpu_get_accel_reg</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[14c]"></a>mpu_get_temperature</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[14f]"></a>mpu_set_accel_bias</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[157]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[158]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[159]"></a>mpu_get_lpf</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[15a]"></a>mpu_get_sample_rate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[26f]"></a>mpu_get_compass_sample_rate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>mpu_set_compass_sample_rate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[165]"></a>mpu_get_accel_sens</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[271]"></a>mpu_get_fifo_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>mpu_get_power_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>mpu_get_int_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[151]"></a>mpu_read_fifo</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>

<P><STRONG><a name="[152]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[273]"></a>mpu_set_int_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>mpu_set_dmp_state</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[156]"></a>mpu_run_self_test</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[15d]"></a>mpu_write_mem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[15e]"></a>mpu_read_mem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_read_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[15f]"></a>mpu_load_firmware</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[274]"></a>mpu_get_dmp_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>setup_compass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>mpu_get_compass_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>mpu_get_compass_fsr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>mpu_lp_motion_interrupt</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>

<P><STRONG><a name="[162]"></a>run_self_test</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[168]"></a>inv_row_2_scale</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[167]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[c2]"></a>mpu_dmp_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[138]"></a>mpu_dmp_get_data</STRONG> (Thumb, 406 bytes, Stack size 104 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Roll_Detect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[16a]"></a>dmp_set_orientation</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[164]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[166]"></a>dmp_set_accel_bias</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[16c]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[278]"></a>dmp_get_fifo_rate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[172]"></a>dmp_set_tap_axes</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[173]"></a>dmp_set_tap_count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[174]"></a>dmp_set_tap_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[175]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[176]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[177]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[178]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[179]"></a>dmp_get_pedometer_step_count</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[17a]"></a>dmp_set_pedometer_step_count</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[17b]"></a>dmp_get_pedometer_walk_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[17c]"></a>dmp_set_pedometer_walk_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[17d]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[17f]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[180]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[16b]"></a>dmp_enable_feature</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[279]"></a>dmp_get_enabled_features</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[16d]"></a>dmp_read_fifo</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[27a]"></a>dmp_register_tap_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>dmp_register_android_orient_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[eb]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_I2C_WaitAck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[c0]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTrim
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bme280_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_IIC_Configuration
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movecheck
</UL>

<P><STRONG><a name="[27c]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[184]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>KEY_INT_INIT</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_INT_INIT &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[18d]"></a>RCC_Configuration</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI9_5_IRQHandler &rArr; OLED_ON &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ON
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[19f]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_pin_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_startup
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_IIC_Configuration
</UL>

<P><STRONG><a name="[27d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_wake
</UL>

<P><STRONG><a name="[27e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_pin_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_IIC_Configuration
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[df]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[281]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_startup
</UL>

<P><STRONG><a name="[18b]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INT_INIT
</UL>

<P><STRONG><a name="[286]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18f]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[196]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[190]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[287]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[195]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[197]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[198]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[192]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[193]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[194]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[289]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[28b]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[28f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INT_INIT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_pin_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_startup
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_IIC_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[19e]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[290]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[186]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[296]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[187]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[299]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a0]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2ac]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[185]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INT_INIT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[2ad]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[e1]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
</UL>

<P><STRONG><a name="[2af]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_ICInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[2b2]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[e2]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>

<P><STRONG><a name="[1f4]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[2b7]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1b0]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[1af]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2bb]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>TIM_SelectOCxM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>

<P><STRONG><a name="[e8]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>

<P><STRONG><a name="[e5]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[1f5]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[f7]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[2ee]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[2ef]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[fa]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[fb]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[fc]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[fd]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[2f1]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[2f4]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[2f5]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[304]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[307]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd2
</UL>

<P><STRONG><a name="[30b]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INT_INIT
</UL>

<P><STRONG><a name="[30f]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>AlarmEnalbe</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1b6]"></a>alarm_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[c9]"></a>alarm_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_init &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[1b7]"></a>alarm_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1b8]"></a>alarm_getNext</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
</UL>

<P><STRONG><a name="[313]"></a>alarm_getNextDay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>alarm_save</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_save &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
</UL>

<P><STRONG><a name="[d2]"></a>alarm_update</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alarm_update &rArr; tune_play &rArr; next &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[1c1]"></a>alarm_updateNextAlarm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_updateNextAlarm &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[64]"></a>mAlarmsOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mAlarmsOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(.text)
<LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>animation_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, animation.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>animation_update</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = animation_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[127]"></a>animation_start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, animation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd3
</UL>

<P><STRONG><a name="[1d7]"></a>animation_active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[1eb]"></a>animation_movingOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, animation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[1d9]"></a>animation_offsetY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[1d4]"></a>appconfig_save</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[1cd]"></a>appconfig_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, appconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[c5]"></a>appconfig_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appconfig.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[1ce]"></a>buttons_startup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buttons_startup &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
</UL>

<P><STRONG><a name="[c7]"></a>buttons_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = buttons_init &rArr; buttons_startup &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[cf]"></a>buttons_update</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = buttons_update &rArr; processButton &rArr; tune_play &rArr; next &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[315]"></a>buttons_shutdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, buttons.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>buttons_setFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
</UL>

<P><STRONG><a name="[12a]"></a>buttons_setFuncs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_open
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_menu_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_display
</UL>

<P><STRONG><a name="[1d0]"></a>buttons_isActive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buttons_isActive
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
</UL>

<P><STRONG><a name="[1d1]"></a>buttons_wake</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = buttons_wake
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userWake
</UL>

<P><STRONG><a name="[79]"></a>mDiagOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mDiagOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> diag.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>display_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[37]"></a>display_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>
<BR>[Address Reference Count : 7]<UL><LI> mpu_task.o(.text)
<LI> nvic.o(.text)
<LI> game1.o(.text)
<LI> game2.o(.text)
<LI> game3.o(.text)
<LI> my_menu.o(.text)
<LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>display_setDrawFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_open
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_menu_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_display
</UL>

<P><STRONG><a name="[d3]"></a>display_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = display_update &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_update
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[211]"></a>display_startCRTAnim</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userWake
</UL>

<P><STRONG><a name="[1bb]"></a>draw_bitmap</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPixels
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_offsetY
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_s2
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[121]"></a>draw_string</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_tone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thisdraw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thisDraw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_draw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_print_s
</UL>

<P><STRONG><a name="[1db]"></a>draw_string_P</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1c5]"></a>draw_clearArea</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, draw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
</UL>

<P><STRONG><a name="[1d8]"></a>draw_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_end &rArr; oled_flush &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[1df]"></a>game1_draw</STRONG> (Thumb, 786 bytes, Stack size 64 bytes, game1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = game1_draw &rArr; MPU_Roll_Detect &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Roll_Detect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game1.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>game1_start</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, game1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = game1_start &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>game2_start</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, game2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = game2_start &rArr; menu_close
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(.text)
</UL>
<P><STRONG><a name="[1e4]"></a>draw_bitmap_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, game3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_bitmap_set &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1e5]"></a>draw_bitmap_s2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, game3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_bitmap_s2 &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[59]"></a>game3_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, game3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = game3_start &rArr; menu_close
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(.text)
</UL>
<P><STRONG><a name="[316]"></a>_DrawPoint</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, game3.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>mGamesOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, games.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mGamesOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(.text)
<LI> games.o(.text)
</UL>
<P><STRONG><a name="[317]"></a>global_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, global.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>global_update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, global.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>div10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[1fa]"></a>mod10</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[78]"></a>mDisplayOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mDisplayOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[1e9]"></a>mMainOpen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mMainOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[6d]"></a>menu_select</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_select &rArr; mMainOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_main.o(.text)
<LI> normal.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>menu_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_down &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>menu_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_up &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>menu_draw</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = menu_draw &rArr; menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[1ea]"></a>beginAnimation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>

<P><STRONG><a name="[1c9]"></a>setMenuOption</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[1d3]"></a>setMenuOption_P</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[319]"></a>menu_isOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>menu_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_close
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>setPrevMenuOpen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
</UL>

<P><STRONG><a name="[1c3]"></a>exitSelected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[1c2]"></a>setPrevMenuExit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[87]"></a>back</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = back &rArr; mMainOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>
<BR>[Address Reference Count : 4]<UL><LI> menu.o(.text)
<LI> stopwatch.o(.text)
<LI> torch.o(.text)
<LI> tunemaker.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>addBackOption</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[12b]"></a>beginAnimation2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_menu_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_display
</UL>

<P><STRONG><a name="[1cb]"></a>setMenuInfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_menu_open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
</UL>

<P><STRONG><a name="[1c7]"></a>setMenuFuncs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_menu_open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
</UL>

<P><STRONG><a name="[46]"></a>nextOption</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDown
</UL>
<BR>[Address Reference Count : 9]<UL><LI> settings.o(.text)
<LI> alarms.o(.text)
<LI> m_display.o(.text)
<LI> m_main.o(.text)
<LI> sleep.o(.text)
<LI> diag.o(.text)
<LI> games.o(.text)
<LI> sound.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>prevOption</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUp
</UL>
<BR>[Address Reference Count : 9]<UL><LI> settings.o(.text)
<LI> alarms.o(.text)
<LI> m_display.o(.text)
<LI> m_main.o(.text)
<LI> sleep.o(.text)
<LI> diag.o(.text)
<LI> games.o(.text)
<LI> sound.o(.text)
<LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>doAction</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[bd]"></a>millis_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, millis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = millis_init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[e7]"></a>millis_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, millis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_updata
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_wake
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_isActive
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnReset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnStartStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, millis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TIM3_IRQHandler &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>watchface_normal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, normal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchface_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>mSettingsOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mSettingsOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>mSleepOpen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mSleepOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>mSoundOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mSoundOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> sound.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>stopwatch_open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopwatch_open
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[1fe]"></a>stopwatch_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stopwatch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[d1]"></a>stopwatch_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopwatch_update
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[201]"></a>time_wake</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_wake
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
</UL>

<P><STRONG><a name="[202]"></a>time_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_wake
</UL>

<P><STRONG><a name="[31a]"></a>time_sleep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>time_shutdown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>time_timeMode</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[203]"></a>time_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = time_set &rArr; Set_DS3231_Time &rArr; DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_Time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DS3231_date
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_updateNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
</UL>

<P><STRONG><a name="[205]"></a>time_isLeapYear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
</UL>

<P><STRONG><a name="[20a]"></a>time_dow</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[204]"></a>time_monthDayCount</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = time_monthDayCount
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[1bc]"></a>time_timeStr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = time_timeStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[206]"></a>time_update</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
</UL>

<P><STRONG><a name="[75]"></a>mTimeDateOpen</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mTimeDateOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(.text)
<LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>torch_open</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, torch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = torch_open
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>tune_play</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tune.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tune_play &rArr; next &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_tone
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
</UL>

<P><STRONG><a name="[1ba]"></a>tune_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tune.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tune_stop &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[20d]"></a>OLED_DrawPoint</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>

<P><STRONG><a name="[20c]"></a>OLED_DrawLine</STRONG> (Thumb, 148 bytes, Stack size 44 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_DrawLine &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[20e]"></a>__SysTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tunemaker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[67]"></a>tunemakerOpen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tunemakerOpen &rArr; chose_tone &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_tone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[1fc]"></a>drawBattery</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drawBattery &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[cb]"></a>pwrmgr_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwrmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[210]"></a>userWake</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = userWake &rArr; buttons_wake
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_startCRTAnim
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movecheck
</UL>

<P><STRONG><a name="[212]"></a>movecheck</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = movecheck &rArr; MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userWake
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_update
</UL>

<P><STRONG><a name="[d4]"></a>pwrmgr_update</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pwrmgr_update &rArr; movecheck &rArr; MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_startCRTAnim
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_isActive
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movecheck
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userWake
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[ce]"></a>pwrmgr_userActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwrmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[d6]"></a>InitGraph</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitGraph &rArr; DriverInit &rArr; OLED_Init &rArr; OLED_CLS &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d9]"></a>ClearScreen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreenBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[215]"></a>UpdateScreen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenDisplay
</UL>

<P><STRONG><a name="[217]"></a>FillByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteBuffer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteBuffer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFillColor
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillVerticalLine
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
</UL>

<P><STRONG><a name="[21b]"></a>FillRect</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillByte
</UL>

<P><STRONG><a name="[21c]"></a>FillVerticalLine</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillByte
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill2
</UL>

<P><STRONG><a name="[21d]"></a>mySqrt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[31c]"></a>sqrt_16</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>SetAngle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRotateValue
</UL>

<P><STRONG><a name="[31d]"></a>SetAnggleDir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>SetRotateCenter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRotateValue
</UL>

<P><STRONG><a name="[221]"></a>SetRotateValue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRotateCenter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
</UL>

<P><STRONG><a name="[223]"></a>GetRotateXY</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[224]"></a>FloodFill</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenDisplay
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointBuffer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointBuffer
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill
</UL>

<P><STRONG><a name="[227]"></a>GetLengthUp</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointBuffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthUp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthDown
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthUp
</UL>

<P><STRONG><a name="[228]"></a>GetLengthDown</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointBuffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthUp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill2
</UL>

<P><STRONG><a name="[229]"></a>FloodFill2</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointBuffer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthDown
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthUp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillVerticalLine
</UL>

<P><STRONG><a name="[31e]"></a>pgm_read_byte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>oled_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>FrameRateUpdateScreen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenDisplay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreenBuffer
</UL>

<P><STRONG><a name="[320]"></a>WaitTimeMs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>UpdateScreenPiece</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_basic.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>SetTempBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>SetScreenBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>GetSelectedBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>ReadByteBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillByte
</UL>

<P><STRONG><a name="[21a]"></a>WriteByteBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillByte
</UL>

<P><STRONG><a name="[226]"></a>SetPointBuffer</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill
</UL>

<P><STRONG><a name="[225]"></a>GetPointBuffer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthDown
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLengthUp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill
</UL>

<P><STRONG><a name="[216]"></a>UpdateScreenDisplay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameRateUpdateScreen
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloodFill
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreen
</UL>

<P><STRONG><a name="[214]"></a>ClearScreenBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameRateUpdateScreen
</UL>

<P><STRONG><a name="[22c]"></a>ClearTempBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempBufferFunc
</UL>

<P><STRONG><a name="[22d]"></a>TempBufferFunc</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, oled_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTempBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[325]"></a>SetDrawColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_color.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>GetDrawColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_color.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>SetFillcolor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_color.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>GetFillColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_color.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillByte
</UL>

<P><STRONG><a name="[213]"></a>DriverInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DriverInit &rArr; OLED_Init &rArr; OLED_CLS &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_IIC_Configuration
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
</UL>

<P><STRONG><a name="[22b]"></a>UpdateScreenBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FILL
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenDisplay
</UL>

<P><STRONG><a name="[232]"></a>UpdateTempBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FILL
</UL>

<P><STRONG><a name="[328]"></a>OledTimeMsFunc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oled_config.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>SW_IIC_Configuration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SW_IIC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[233]"></a>IIC_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[234]"></a>IIC_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[235]"></a>IIC_Wait_Ack</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[236]"></a>Write_IIC_Byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[d7]"></a>WriteCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ON
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FILL
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBrightness
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRotate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_OFF
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[db]"></a>WriteDat</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FILL
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[231]"></a>OLED_FILL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTempBuffer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateScreenBuffer
</UL>

<P><STRONG><a name="[237]"></a>OLED_CLS</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_CLS &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[230]"></a>OLED_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Init &rArr; OLED_CLS &rArr; WriteDat &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[19b]"></a>OLED_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_ON &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[238]"></a>OLED_OFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_OFF &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd2
</UL>

<P><STRONG><a name="[239]"></a>gui_print_s</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_log_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gui_print_s &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_loop_show
</UL>

<P><STRONG><a name="[329]"></a>up_line</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_log_console.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>down_line</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_log_console.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>console_loop_show</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gui_log_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_print_s
</UL>

<P><STRONG><a name="[23d]"></a>strcopy_cnt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_log_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcopy_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
</UL>

<P><STRONG><a name="[23c]"></a>find_huanhang_str_idx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_log_console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
</UL>

<P><STRONG><a name="[be]"></a>console_log</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, gui_log_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = console_log &rArr;  console_log (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_huanhang_str_idx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcopy_cnt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_print_s
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[23f]"></a>ShutDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>cmd2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, my_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd2 &rArr; OLED_OFF &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[242]"></a>cmd3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd3
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>my_menu_open</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, my_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_menu_open &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>altitude_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, altitude_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = altitude_open
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>history_display</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, altitude_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = history_display
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[1e1]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1e2]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempBufferFunc
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreenBuffer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[32d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTempBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_reset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>

<P><STRONG><a name="[32f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[23e]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
</UL>

<P><STRONG><a name="[1dc]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>

<P><STRONG><a name="[160]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[1bd]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>

<P><STRONG><a name="[1e3]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySqrt
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Roll_Detect
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySqrt
</UL>

<P><STRONG><a name="[14e]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySqrt
</UL>

<P><STRONG><a name="[330]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[119]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[331]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DS3231_Time
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRotateXY
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_draw
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280CompensateH
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[332]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presssureFilter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[333]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[334]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[335]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[336]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[245]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[24a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[249]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[338]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[339]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
</UL>

<P><STRONG><a name="[33c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[33d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[251]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[122]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thisdraw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thisDraw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;history_draw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[33f]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[340]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[252]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[341]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[342]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[343]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[23b]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_log
</UL>

<P><STRONG><a name="[257]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[253]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[254]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[255]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[256]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[259]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[25a]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[25b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[258]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[344]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[345]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[346]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[260]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[16e]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[262]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[16f]"></a>atan2</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[21f]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[1de]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
</UL>

<P><STRONG><a name="[1dd]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1f0]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate
</UL>

<P><STRONG><a name="[261]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d5]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e4]"></a>stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_update
</UL>

<P><STRONG><a name="[3a]"></a>btnExit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu_task.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>btnup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mpu_task.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>btndown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mpu_task.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>dso</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dso &rArr; myOLED_DrawLine &rArr; draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myOLED_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[38]"></a>draw</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mpu_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dso
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu_task.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>set_int_enable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_int_enable &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[153]"></a>get_st_biases</STRONG> (Thumb, 782 bytes, Stack size 48 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_st_biases &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[15b]"></a>accel_self_test</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[15c]"></a>gyro_self_test</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gyro_self_test &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[170]"></a>get_accel_prod_shift</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[1a7]"></a>TI2_Config</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a5]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b3]"></a>getNextAlarm</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toMinutes
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_updateNextAlarm
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
</UL>

<P><STRONG><a name="[3f]"></a>stopAlarm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stopAlarm &rArr; tune_stop &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>draw</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>toMinutes</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[1be]"></a>goingOff</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = goingOff &rArr; alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[42]"></a>mSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>alarmsDraw</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alarmsDraw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>alarmsUp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>alarmsDown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>selectAlarm</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = selectAlarm &rArr; alarm_save &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>itemLoader</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>getMaxValForSetting</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, alarms.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDown
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsUp
</UL>

<P><STRONG><a name="[1c8]"></a>makeAlarmStr</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, alarms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = makeAlarmStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[1cf]"></a>processButton</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = processButton &rArr; tune_play &rArr; next &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitCount
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
</UL>

<P><STRONG><a name="[1d2]"></a>bitCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[49]"></a>MeasureTimeUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>Change_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, diag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>itemLoader</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, diag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>crt_animation</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crt_animation
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[1da]"></a>readPixels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, draw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[4c]"></a>btnLeft</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game1.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>btnExit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, game1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = btnExit &rArr; game1_start &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game1.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>btnRight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game1.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>btnDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game2.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>btnExit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, game2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btnExit &rArr; game2_start &rArr; menu_close
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game2.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>btnUp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, game2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game2.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>draw</STRONG> (Thumb, 812 bytes, Stack size 56 bytes, game2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Pitch_Detect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game2.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>btnBounce</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, game3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game3.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>btnExit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, game3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btnExit &rArr; game3_start &rArr; menu_close
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game3.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>btnPause</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, game3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> game3.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>draw</STRONG> (Thumb, 626 bytes, Stack size 56 bytes, game3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Pitch_Detect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_s2
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game3.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>itemLoader</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, games.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, games.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>thisDraw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thisDraw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>setFPS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>setAnimations</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>setRotate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setRotate &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>setInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>setBrightness</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setBrightness &rArr; WriteCmd &rArr; Write_IIC_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = itemLoader &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(.text)
</UL>
<P><STRONG><a name="[1e7]"></a>setMenuOptions</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, m_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[6f]"></a>itemLoader</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>mOpen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mOpen &rArr; setMenuInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>getItemCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[1ed]"></a>drawTitle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[1ee]"></a>menu_drawIcon</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[1f2]"></a>checkScroll</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>

<P><STRONG><a name="[1ec]"></a>doBtn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_up
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_down
</UL>

<P><STRONG><a name="[1ef]"></a>loader</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[1f1]"></a>clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>

<P><STRONG><a name="[1f7]"></a>drawTickerNum</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, normal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[1f8]"></a>ticker</STRONG> (Thumb, 654 bytes, Stack size 72 bytes, normal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTickerNum
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[72]"></a>draw</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, normal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = draw &rArr; ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmEnalbe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_active
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBattery
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>drawDate</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, normal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drawDate &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[7a]"></a>itemLoader</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, settings.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, settings.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>mDraw</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mDraw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>setMoveCheck</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sleep.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>setTimeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>itemLoader</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>mSelect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>thisdraw</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thisdraw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>setVolumeHour</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeHour
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>setVolumeAlarm</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>setVolumeUI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeUI
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = itemLoader &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>setVolume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sound.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeUI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeAlarm
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeHour
</UL>

<P><STRONG><a name="[200]"></a>setMenuOptions</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[89]"></a>btnExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>btnStartStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnStartStop
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>btnReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnReset
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>draw</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stopwatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>saveTimeDate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = saveTimeDate &rArr; time_set &rArr; Set_DS3231_Time &rArr; DS3231_WR_Byte &rArr; I2C_WaitAck &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>mUp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mUp
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>mSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>mDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mDown
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>timeDateDraw</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = timeDateDraw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>getMaxValForSetting</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timedate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataDown
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataUp
</UL>

<P><STRONG><a name="[93]"></a>timeDataUp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeDataUp
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>timeDataDown</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeDataDown
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>selectTime</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = selectTime &rArr; beginSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>selectDate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = selectDate &rArr; beginSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_dow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>itemLoader</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>endSelect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
</UL>

<P><STRONG><a name="[208]"></a>beginSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beginSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
</UL>

<P><STRONG><a name="[97]"></a>btnExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, torch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> torch.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>btnFlashRate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, torch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> torch.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>draw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, torch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = draw
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> torch.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>next</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tune.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = next &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_buzz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tune.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>chose_tone</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chose_tone &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
</UL>

<P><STRONG><a name="[9d]"></a>down</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tunemaker.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>select</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = select &rArr; tune_stop &rArr; buzzer_buzz &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>up</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tunemaker.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>draw</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, tunemaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SysTick
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_tone
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(.text)
</UL>
<P><STRONG><a name="[21e]"></a>Rotate</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, oled_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySqrt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRotateXY
</UL>

<P><STRONG><a name="[a2]"></a>mSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_menu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>LogTimeUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>itemLoader</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, my_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_menu.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>btnExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, altitude_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>btnup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, altitude_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>btndown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, altitude_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>draw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, altitude_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = draw &rArr; display_altitude &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_altitude
</UL>
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>history_draw</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, altitude_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = history_draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>btnup1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, altitude_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>btndown1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, altitude_display.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> altitude_display.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[250]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[25e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
